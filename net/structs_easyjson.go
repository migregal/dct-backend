// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package net

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeFinnflareComDctBackendNet(in *jlexer.Lexer, out *ResponseBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "error":
			out.Error = bool(in.Bool())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(Data)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet(out *jwriter.Writer, in ResponseBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.Bool(bool(in.Error))
	}
	if in.Data != nil {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(*in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			if in.IsNull() {
				in.Skip()
				out.Header = nil
			} else {
				if out.Header == nil {
					out.Header = new(Header)
				}
				(*out.Header).UnmarshalEasyJSON(in)
			}
		case "request":
			if in.IsNull() {
				in.Skip()
				out.RequestBody = nil
			} else {
				if out.RequestBody == nil {
					out.RequestBody = new(Body)
				}
				(*out.RequestBody).UnmarshalEasyJSON(in)
			}
		case "response":
			if in.IsNull() {
				in.Skip()
				out.ResponseBody = nil
			} else {
				if out.ResponseBody == nil {
					out.ResponseBody = new(ResponseBody)
				}
				(*out.ResponseBody).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix[1:])
		if in.Header == nil {
			out.RawString("null")
		} else {
			(*in.Header).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"request\":"
		out.RawString(prefix)
		if in.RequestBody == nil {
			out.RawString("null")
		} else {
			(*in.RequestBody).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		if in.ResponseBody == nil {
			out.RawString("null")
		} else {
			(*in.ResponseBody).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet1(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet2(in *jlexer.Lexer, out *RequestHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			if in.IsNull() {
				in.Skip()
				out.Header = nil
			} else {
				if out.Header == nil {
					out.Header = new(Header)
				}
				(*out.Header).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet2(out *jwriter.Writer, in RequestHeader) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Header != nil {
		const prefix string = ",\"header\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Header).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestHeader) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestHeader) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestHeader) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestHeader) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet2(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet3(in *jlexer.Lexer, out *RequestBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(Body)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet3(out *jwriter.Writer, in RequestBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Body != nil {
		const prefix string = ",\"request\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequestBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequestBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequestBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequestBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet3(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet4(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "header":
			if in.IsNull() {
				in.Skip()
				out.Header = nil
			} else {
				if out.Header == nil {
					out.Header = new(Header)
				}
				(*out.Header).UnmarshalEasyJSON(in)
			}
		case "request":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(Body)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet4(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Header != nil {
		const prefix string = ",\"header\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Header).MarshalEasyJSON(out)
	}
	if in.Body != nil {
		const prefix string = ",\"request\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet4(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet5(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "token":
			out.Token = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet5(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet5(l, v)
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet6(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(struct {
						Name string `json:"name"`
						Guid string `json:"guid"`
					})
				}
				easyjson6a975c40Decode(in, out.User)
			}
		case "operations":
			if in.IsNull() {
				in.Skip()
				out.Operations = nil
			} else {
				in.Delim('[')
				if out.Operations == nil {
					if !in.IsDelim(']') {
						out.Operations = make([]struct {
							OperationCode string `json:"code"`
							OperationName string `json:"name"`
						}, 0, 2)
					} else {
						out.Operations = []struct {
							OperationCode string `json:"code"`
							OperationName string `json:"name"`
						}{}
					}
				} else {
					out.Operations = (out.Operations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						OperationCode string `json:"code"`
						OperationName string `json:"name"`
					}
					easyjson6a975c40Decode1(in, &v1)
					out.Operations = append(out.Operations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "task":
			if in.IsNull() {
				in.Skip()
				out.Task = nil
			} else {
				if out.Task == nil {
					out.Task = new(struct {
						Taskname string `json:"taskname"`
						Taskguid string `json:"taskguid"`
						Totalqty string `json:"totalqty"`
						Execqty  string `json:"execqty"`
					})
				}
				easyjson6a975c40Decode2(in, out.Task)
			}
		case "tasklist":
			if in.IsNull() {
				in.Skip()
				out.Tasklist = nil
			} else {
				in.Delim('[')
				if out.Tasklist == nil {
					if !in.IsDelim(']') {
						out.Tasklist = make([]struct {
							Taskname string `json:"taskname"`
							Taskguid string `json:"taskguid"`
						}, 0, 2)
					} else {
						out.Tasklist = []struct {
							Taskname string `json:"taskname"`
							Taskguid string `json:"taskguid"`
						}{}
					}
				} else {
					out.Tasklist = (out.Tasklist)[:0]
				}
				for !in.IsDelim(']') {
					var v2 struct {
						Taskname string `json:"taskname"`
						Taskguid string `json:"taskguid"`
					}
					easyjson6a975c40Decode3(in, &v2)
					out.Tasklist = append(out.Tasklist, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "caselist":
			if in.IsNull() {
				in.Skip()
				out.Caselist = nil
			} else {
				in.Delim('[')
				if out.Caselist == nil {
					if !in.IsDelim(']') {
						out.Caselist = make([]struct {
							Caseid    string `json:"caseid"`
							Casename  string `json:"casename"`
							Locid     string `json:"locid"`
							Loc       string `json:"loc"`
							Qty       int    `json:"qty"`
							Deviation bool   `json:"deviation"`
						}, 0, 0)
					} else {
						out.Caselist = []struct {
							Caseid    string `json:"caseid"`
							Casename  string `json:"casename"`
							Locid     string `json:"locid"`
							Loc       string `json:"loc"`
							Qty       int    `json:"qty"`
							Deviation bool   `json:"deviation"`
						}{}
					}
				} else {
					out.Caselist = (out.Caselist)[:0]
				}
				for !in.IsDelim(']') {
					var v3 struct {
						Caseid    string `json:"caseid"`
						Casename  string `json:"casename"`
						Locid     string `json:"locid"`
						Loc       string `json:"loc"`
						Qty       int    `json:"qty"`
						Deviation bool   `json:"deviation"`
					}
					easyjson6a975c40Decode4(in, &v3)
					out.Caselist = append(out.Caselist, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "case":
			if in.IsNull() {
				in.Skip()
				out.Case = nil
			} else {
				if out.Case == nil {
					out.Case = new(struct {
						Casename string `json:"casename"`
						Caseid   string `json:"caseid"`
					})
				}
				easyjson6a975c40Decode5(in, out.Case)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet6(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != nil {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		easyjson6a975c40Encode(out, *in.User)
	}
	if len(in.Operations) != 0 {
		const prefix string = ",\"operations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v4, v5 := range in.Operations {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40Encode1(out, v5)
			}
			out.RawByte(']')
		}
	}
	if in.Task != nil {
		const prefix string = ",\"task\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode2(out, *in.Task)
	}
	if len(in.Tasklist) != 0 {
		const prefix string = ",\"tasklist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Tasklist {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40Encode3(out, v7)
			}
			out.RawByte(']')
		}
	}
	if len(in.Caselist) != 0 {
		const prefix string = ",\"caselist\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Caselist {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson6a975c40Encode4(out, v9)
			}
			out.RawByte(']')
		}
	}
	if in.Case != nil {
		const prefix string = ",\"case\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode5(out, *in.Case)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet6(l, v)
}
func easyjson6a975c40Decode5(in *jlexer.Lexer, out *struct {
	Casename string `json:"casename"`
	Caseid   string `json:"caseid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "casename":
			out.Casename = string(in.String())
		case "caseid":
			out.Caseid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode5(out *jwriter.Writer, in struct {
	Casename string `json:"casename"`
	Caseid   string `json:"caseid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"casename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Casename))
	}
	{
		const prefix string = ",\"caseid\":"
		out.RawString(prefix)
		out.String(string(in.Caseid))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode4(in *jlexer.Lexer, out *struct {
	Caseid    string `json:"caseid"`
	Casename  string `json:"casename"`
	Locid     string `json:"locid"`
	Loc       string `json:"loc"`
	Qty       int    `json:"qty"`
	Deviation bool   `json:"deviation"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caseid":
			out.Caseid = string(in.String())
		case "casename":
			out.Casename = string(in.String())
		case "locid":
			out.Locid = string(in.String())
		case "loc":
			out.Loc = string(in.String())
		case "qty":
			out.Qty = int(in.Int())
		case "deviation":
			out.Deviation = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode4(out *jwriter.Writer, in struct {
	Caseid    string `json:"caseid"`
	Casename  string `json:"casename"`
	Locid     string `json:"locid"`
	Loc       string `json:"loc"`
	Qty       int    `json:"qty"`
	Deviation bool   `json:"deviation"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"caseid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Caseid))
	}
	{
		const prefix string = ",\"casename\":"
		out.RawString(prefix)
		out.String(string(in.Casename))
	}
	{
		const prefix string = ",\"locid\":"
		out.RawString(prefix)
		out.String(string(in.Locid))
	}
	{
		const prefix string = ",\"loc\":"
		out.RawString(prefix)
		out.String(string(in.Loc))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.Int(int(in.Qty))
	}
	{
		const prefix string = ",\"deviation\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deviation))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode3(in *jlexer.Lexer, out *struct {
	Taskname string `json:"taskname"`
	Taskguid string `json:"taskguid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskname":
			out.Taskname = string(in.String())
		case "taskguid":
			out.Taskguid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode3(out *jwriter.Writer, in struct {
	Taskname string `json:"taskname"`
	Taskguid string `json:"taskguid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Taskname))
	}
	{
		const prefix string = ",\"taskguid\":"
		out.RawString(prefix)
		out.String(string(in.Taskguid))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode2(in *jlexer.Lexer, out *struct {
	Taskname string `json:"taskname"`
	Taskguid string `json:"taskguid"`
	Totalqty string `json:"totalqty"`
	Execqty  string `json:"execqty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskname":
			out.Taskname = string(in.String())
		case "taskguid":
			out.Taskguid = string(in.String())
		case "totalqty":
			out.Totalqty = string(in.String())
		case "execqty":
			out.Execqty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode2(out *jwriter.Writer, in struct {
	Taskname string `json:"taskname"`
	Taskguid string `json:"taskguid"`
	Totalqty string `json:"totalqty"`
	Execqty  string `json:"execqty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Taskname))
	}
	{
		const prefix string = ",\"taskguid\":"
		out.RawString(prefix)
		out.String(string(in.Taskguid))
	}
	{
		const prefix string = ",\"totalqty\":"
		out.RawString(prefix)
		out.String(string(in.Totalqty))
	}
	{
		const prefix string = ",\"execqty\":"
		out.RawString(prefix)
		out.String(string(in.Execqty))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode1(in *jlexer.Lexer, out *struct {
	OperationCode string `json:"code"`
	OperationName string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.OperationCode = string(in.String())
		case "name":
			out.OperationName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode1(out *jwriter.Writer, in struct {
	OperationCode string `json:"code"`
	OperationName string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.OperationCode))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.OperationName))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
	Guid string `json:"guid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "guid":
			out.Guid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode(out *jwriter.Writer, in struct {
	Name string `json:"name"`
	Guid string `json:"guid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"guid\":"
		out.RawString(prefix)
		out.String(string(in.Guid))
	}
	out.RawByte('}')
}
func easyjson6a975c40DecodeFinnflareComDctBackendNet7(in *jlexer.Lexer, out *Body) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "barcode":
			if in.IsNull() {
				in.Skip()
				out.Barcode = nil
			} else {
				if out.Barcode == nil {
					out.Barcode = new(string)
				}
				*out.Barcode = string(in.String())
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(struct {
						Guid *string `json:"guid,omitempty"`
					})
				}
				easyjson6a975c40Decode6(in, out.User)
			}
		case "operationcode":
			if in.IsNull() {
				in.Skip()
				out.OperationCode = nil
			} else {
				if out.OperationCode == nil {
					out.OperationCode = new(string)
				}
				*out.OperationCode = string(in.String())
			}
		case "task":
			if in.IsNull() {
				in.Skip()
				out.Task = nil
			} else {
				if out.Task == nil {
					out.Task = new(struct {
						Taskguid string `json:"taskguid"`
					})
				}
				easyjson6a975c40Decode7(in, out.Task)
			}
		case "case":
			if in.IsNull() {
				in.Skip()
				out.Case = nil
			} else {
				if out.Case == nil {
					out.Case = new(struct {
						Caseid string `json:"caseid"`
					})
				}
				easyjson6a975c40Decode8(in, out.Case)
			}
		case "previouscase":
			if in.IsNull() {
				in.Skip()
				out.Previouscase = nil
			} else {
				if out.Previouscase == nil {
					out.Previouscase = new(struct {
						Previouscaseid string `json:"previouscaseid"`
					})
				}
				easyjson6a975c40Decode9(in, out.Previouscase)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeFinnflareComDctBackendNet7(out *jwriter.Writer, in Body) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Barcode != nil {
		const prefix string = ",\"barcode\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Barcode))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode6(out, *in.User)
	}
	if in.OperationCode != nil {
		const prefix string = ",\"operationcode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OperationCode))
	}
	if in.Task != nil {
		const prefix string = ",\"task\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode7(out, *in.Task)
	}
	if in.Case != nil {
		const prefix string = ",\"case\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode8(out, *in.Case)
	}
	if in.Previouscase != nil {
		const prefix string = ",\"previouscase\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson6a975c40Encode9(out, *in.Previouscase)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Body) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeFinnflareComDctBackendNet7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Body) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeFinnflareComDctBackendNet7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Body) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeFinnflareComDctBackendNet7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Body) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeFinnflareComDctBackendNet7(l, v)
}
func easyjson6a975c40Decode9(in *jlexer.Lexer, out *struct {
	Previouscaseid string `json:"previouscaseid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "previouscaseid":
			out.Previouscaseid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode9(out *jwriter.Writer, in struct {
	Previouscaseid string `json:"previouscaseid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"previouscaseid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Previouscaseid))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode8(in *jlexer.Lexer, out *struct {
	Caseid string `json:"caseid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caseid":
			out.Caseid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode8(out *jwriter.Writer, in struct {
	Caseid string `json:"caseid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"caseid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Caseid))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode7(in *jlexer.Lexer, out *struct {
	Taskguid string `json:"taskguid"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskguid":
			out.Taskguid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode7(out *jwriter.Writer, in struct {
	Taskguid string `json:"taskguid"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskguid\":"
		out.RawString(prefix[1:])
		out.String(string(in.Taskguid))
	}
	out.RawByte('}')
}
func easyjson6a975c40Decode6(in *jlexer.Lexer, out *struct {
	Guid *string `json:"guid,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "guid":
			if in.IsNull() {
				in.Skip()
				out.Guid = nil
			} else {
				if out.Guid == nil {
					out.Guid = new(string)
				}
				*out.Guid = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40Encode6(out *jwriter.Writer, in struct {
	Guid *string `json:"guid,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Guid != nil {
		const prefix string = ",\"guid\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Guid))
	}
	out.RawByte('}')
}
